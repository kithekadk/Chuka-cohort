// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id             String       @id
  username       String    @unique
  email          String    @unique
  password       String
  name           String?
  bio            String?
  location       String?
  d_o_b          String?
  website        String?
  profileImage   String?
  headerImage    String?
  role           String @default("user")
  active         Boolean @default(true)
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  retweets       Retweet[]
  followers      Follower[] @relation("UserFollowers")
  following      Follower[] @relation("UserFollowing")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Post {
  id          String        @id
  content     String
  images      Json
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]
  retweets    Retweet[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        String      @id
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String      @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId, commentId])
}

model Retweet {
  id        String      @id
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}

model Follower {
  id        String      @id
  followerId String
  followingId String
  follower  User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  following User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}